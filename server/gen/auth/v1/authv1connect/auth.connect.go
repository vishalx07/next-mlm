// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/auth.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/vishalx07/next-mlm/gen/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceLoginProcedure is the fully-qualified name of the AuthService's Login RPC.
	AuthServiceLoginProcedure = "/auth.v1.AuthService/Login"
	// AuthServiceRegisterStep1Procedure is the fully-qualified name of the AuthService's RegisterStep1
	// RPC.
	AuthServiceRegisterStep1Procedure = "/auth.v1.AuthService/RegisterStep1"
	// AuthServiceRegisterStep2Procedure is the fully-qualified name of the AuthService's RegisterStep2
	// RPC.
	AuthServiceRegisterStep2Procedure = "/auth.v1.AuthService/RegisterStep2"
	// AuthServiceRegisterProcedure is the fully-qualified name of the AuthService's Register RPC.
	AuthServiceRegisterProcedure = "/auth.v1.AuthService/Register"
)

// AuthServiceClient is a client for the auth.v1.AuthService service.
type AuthServiceClient interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RegisterStep1(context.Context, *connect.Request[v1.RegisterStep1Request]) (*connect.Response[v1.RegisterStep1Response], error)
	RegisterStep2(context.Context, *connect.Request[v1.RegisterStep2Request]) (*connect.Response[v1.RegisterStep2Response], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
}

// NewAuthServiceClient constructs a client for the auth.v1.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		login: connect.NewClient[v1.LoginRequest, v1.LoginResponse](
			httpClient,
			baseURL+AuthServiceLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		registerStep1: connect.NewClient[v1.RegisterStep1Request, v1.RegisterStep1Response](
			httpClient,
			baseURL+AuthServiceRegisterStep1Procedure,
			connect.WithSchema(authServiceMethods.ByName("RegisterStep1")),
			connect.WithClientOptions(opts...),
		),
		registerStep2: connect.NewClient[v1.RegisterStep2Request, v1.RegisterStep2Response](
			httpClient,
			baseURL+AuthServiceRegisterStep2Procedure,
			connect.WithSchema(authServiceMethods.ByName("RegisterStep2")),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[v1.RegisterRequest, v1.RegisterResponse](
			httpClient,
			baseURL+AuthServiceRegisterProcedure,
			connect.WithSchema(authServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	login         *connect.Client[v1.LoginRequest, v1.LoginResponse]
	registerStep1 *connect.Client[v1.RegisterStep1Request, v1.RegisterStep1Response]
	registerStep2 *connect.Client[v1.RegisterStep2Request, v1.RegisterStep2Response]
	register      *connect.Client[v1.RegisterRequest, v1.RegisterResponse]
}

// Login calls auth.v1.AuthService.Login.
func (c *authServiceClient) Login(ctx context.Context, req *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RegisterStep1 calls auth.v1.AuthService.RegisterStep1.
func (c *authServiceClient) RegisterStep1(ctx context.Context, req *connect.Request[v1.RegisterStep1Request]) (*connect.Response[v1.RegisterStep1Response], error) {
	return c.registerStep1.CallUnary(ctx, req)
}

// RegisterStep2 calls auth.v1.AuthService.RegisterStep2.
func (c *authServiceClient) RegisterStep2(ctx context.Context, req *connect.Request[v1.RegisterStep2Request]) (*connect.Response[v1.RegisterStep2Response], error) {
	return c.registerStep2.CallUnary(ctx, req)
}

// Register calls auth.v1.AuthService.Register.
func (c *authServiceClient) Register(ctx context.Context, req *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the auth.v1.AuthService service.
type AuthServiceHandler interface {
	Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error)
	RegisterStep1(context.Context, *connect.Request[v1.RegisterStep1Request]) (*connect.Response[v1.RegisterStep1Response], error)
	RegisterStep2(context.Context, *connect.Request[v1.RegisterStep2Request]) (*connect.Response[v1.RegisterStep2Response], error)
	Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := v1.File_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceLoginHandler := connect.NewUnaryHandler(
		AuthServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(authServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRegisterStep1Handler := connect.NewUnaryHandler(
		AuthServiceRegisterStep1Procedure,
		svc.RegisterStep1,
		connect.WithSchema(authServiceMethods.ByName("RegisterStep1")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRegisterStep2Handler := connect.NewUnaryHandler(
		AuthServiceRegisterStep2Procedure,
		svc.RegisterStep2,
		connect.WithSchema(authServiceMethods.ByName("RegisterStep2")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceRegisterHandler := connect.NewUnaryHandler(
		AuthServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(authServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceLoginProcedure:
			authServiceLoginHandler.ServeHTTP(w, r)
		case AuthServiceRegisterStep1Procedure:
			authServiceRegisterStep1Handler.ServeHTTP(w, r)
		case AuthServiceRegisterStep2Procedure:
			authServiceRegisterStep2Handler.ServeHTTP(w, r)
		case AuthServiceRegisterProcedure:
			authServiceRegisterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Login(context.Context, *connect.Request[v1.LoginRequest]) (*connect.Response[v1.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Login is not implemented"))
}

func (UnimplementedAuthServiceHandler) RegisterStep1(context.Context, *connect.Request[v1.RegisterStep1Request]) (*connect.Response[v1.RegisterStep1Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.RegisterStep1 is not implemented"))
}

func (UnimplementedAuthServiceHandler) RegisterStep2(context.Context, *connect.Request[v1.RegisterStep2Request]) (*connect.Response[v1.RegisterStep2Response], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.RegisterStep2 is not implemented"))
}

func (UnimplementedAuthServiceHandler) Register(context.Context, *connect.Request[v1.RegisterRequest]) (*connect.Response[v1.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.AuthService.Register is not implemented"))
}

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/my_network/v1/my_network.proto

package my_networkv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/vishalx07/next-mlm/gen/user/my_network/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MyNetworkServiceName is the fully-qualified name of the MyNetworkService service.
	MyNetworkServiceName = "user.my_network.v1.MyNetworkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MyNetworkServiceGetMyReferralsProcedure is the fully-qualified name of the MyNetworkService's
	// GetMyReferrals RPC.
	MyNetworkServiceGetMyReferralsProcedure = "/user.my_network.v1.MyNetworkService/GetMyReferrals"
)

// MyNetworkServiceClient is a client for the user.my_network.v1.MyNetworkService service.
type MyNetworkServiceClient interface {
	// rpc GetGenealogy(GetGenealogyRequest) returns (GetGenealogyResponse);
	GetMyReferrals(context.Context, *connect.Request[v1.GetMyReferralsRequest]) (*connect.Response[v1.GetMyReferralsResponse], error)
}

// NewMyNetworkServiceClient constructs a client for the user.my_network.v1.MyNetworkService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMyNetworkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MyNetworkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	myNetworkServiceMethods := v1.File_user_my_network_v1_my_network_proto.Services().ByName("MyNetworkService").Methods()
	return &myNetworkServiceClient{
		getMyReferrals: connect.NewClient[v1.GetMyReferralsRequest, v1.GetMyReferralsResponse](
			httpClient,
			baseURL+MyNetworkServiceGetMyReferralsProcedure,
			connect.WithSchema(myNetworkServiceMethods.ByName("GetMyReferrals")),
			connect.WithClientOptions(opts...),
		),
	}
}

// myNetworkServiceClient implements MyNetworkServiceClient.
type myNetworkServiceClient struct {
	getMyReferrals *connect.Client[v1.GetMyReferralsRequest, v1.GetMyReferralsResponse]
}

// GetMyReferrals calls user.my_network.v1.MyNetworkService.GetMyReferrals.
func (c *myNetworkServiceClient) GetMyReferrals(ctx context.Context, req *connect.Request[v1.GetMyReferralsRequest]) (*connect.Response[v1.GetMyReferralsResponse], error) {
	return c.getMyReferrals.CallUnary(ctx, req)
}

// MyNetworkServiceHandler is an implementation of the user.my_network.v1.MyNetworkService service.
type MyNetworkServiceHandler interface {
	// rpc GetGenealogy(GetGenealogyRequest) returns (GetGenealogyResponse);
	GetMyReferrals(context.Context, *connect.Request[v1.GetMyReferralsRequest]) (*connect.Response[v1.GetMyReferralsResponse], error)
}

// NewMyNetworkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMyNetworkServiceHandler(svc MyNetworkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	myNetworkServiceMethods := v1.File_user_my_network_v1_my_network_proto.Services().ByName("MyNetworkService").Methods()
	myNetworkServiceGetMyReferralsHandler := connect.NewUnaryHandler(
		MyNetworkServiceGetMyReferralsProcedure,
		svc.GetMyReferrals,
		connect.WithSchema(myNetworkServiceMethods.ByName("GetMyReferrals")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.my_network.v1.MyNetworkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MyNetworkServiceGetMyReferralsProcedure:
			myNetworkServiceGetMyReferralsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMyNetworkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMyNetworkServiceHandler struct{}

func (UnimplementedMyNetworkServiceHandler) GetMyReferrals(context.Context, *connect.Request[v1.GetMyReferralsRequest]) (*connect.Response[v1.GetMyReferralsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.my_network.v1.MyNetworkService.GetMyReferrals is not implemented"))
}
